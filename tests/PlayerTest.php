<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-25 at 10:48:21.
 */
class PlayerTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Player
     */
    protected $player;
    
    protected $hand;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
	$this->hand = $this->getMock('CardCollection');
        $this->player = new Player('John Smith',$this->hand);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Player::getName
     * @todo   Implement testGetName().
     */
    function testGetName()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    function testDrawCard()
    {
	$deck = $this->getMock('CardCollection');
	$deck->expects($this->once())
		->method('moveTopCardTo')
		->with($this->identicalTo($this->hand));
	
	$this->player->drawCard($deck);
    }
    
    function testTakeCardFromPlayer()
    {
	$otherHand = $this->getMock('CardCollection');
	//first argument CLASS
	//Second argument METHOD
	//Third argument array of PARMS
	$otherPlayer = $this->getMock('Player', array(), array('Jane Smith', $otherHand));
	$card = $this->getMock('Card', array(), array('A', 'Spades'));
	
	$otherPlayer->expects($this->once())
		->method('getCard')
		->with($this->equalTo(4))
		->will($this->returnValue($card));
	
	$otherPlayer->expects($this->once())
		->method('getHand')
		->will($this->returnValue($otherHand));
	
	$this->hand->expects($this->once())
		->method('addCard')
		->with($this->identicalTo($card));
	
	$otherHand->expects($this->once())
		->method('removeCard')
		->with($this->identicalTo($card));

	$this->assertTrue($this->player->takeCards($otherPlayer,4));
    }
}
